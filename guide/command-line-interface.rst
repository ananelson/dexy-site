Command Line Interface
======================

{% from "dexy.jinja" import code, codes with context %}

.. contents:: :local:


Dexy's command line interface is the main way to interact with dexy and
generate your documents. Dexy uses python-modargs_ to process commands and
arguments. All flagged arguments can take any number of dashes, so `-r` and
`--r` and `---r` are all equivalent.

.. _python-modargs: https://pypi.python.org/pypi/python-modargs

Help
----

To get help and see the list of available commands:

{{ codes('code/cli/help.sh|idio|shint|pyg', 'main help') }}

You can also get help on each individual command:

{{ codes('code/cli/help.sh|idio|shint|pyg', 'topic help') }}

To check which version of dexy you are running:

{{ codes('code/cli/help.sh|idio|shint|pyg', 'version') }}

Running Dexy
------------

Here are the commands used to run dexy.

The first time you run dexy on a project, you need to run `dexy setup`:

{{ codes('code/cli/dexy.sh|idio|shint|pyg', 'dexy setup') }}

If you don't, you'll see an error like this reminding you:

{{ codes('code/cli/dexy.sh|idio|shint|pyg', 'run dexy without setup') }}

Once your project is set up, you simply type `dexy` to run dexy:

{{ codes('code/cli/dexy.sh|idio|shint|pyg', 'dexy') }}

To clear out dexy's cache and working files you can do:

{{ codes('code/cli/dexy.sh|idio|shint|pyg', 'dexy reset') }}

This is useful to do if an error occurs while you are running dexy.

To clear out dexy's cache and working files and then run dexy again straight
away:

{{ codes('code/cli/dexy.sh|idio|shint|pyg', 'dexy with r') }}

If you are done working with dexy for a while and you want to get rid of all
the extra directories which dexy creates:

{{ codes('code/cli/dexy.sh|idio|shint|pyg', 'dexy cleanup') }}

(Once you run dexy cleanup, you need to run dexy setup again before running
dexy in this directory.)

Serving Files
-------------

The `dexy serve` command runs a simple web server to serve the static assets
generated by dexy. This command first looks for the `output-site` directory
generated by the `ws` reporter, and if it doesn't find this it looks for the
`output` directory generated by the `output` reporter. It launches a static
server and prints out the port on which the files will be served.

Dexy Options and Conf Files
---------------------------

There are many command line options available for the dexy command.

{{ codes('code/cli/dexy.sh|idio|shint|pyg', 'dexy help') }}

You can write a YAML-formatted config file to save configuration options you
use all the time, so you don't have to type them on the command line. The `dexy
conf` command will write an example file for you containing all the current
dexy defaults.

{{ codes('code/cli/generate-conf.sh|idio|shint|pyg', 'run conf') }}

If a dexy.conf file already exists, the `dexy conf` command won't overwrite the
existing file, instead it will print an example config to stdout:

{{ codes('code/cli/generate-conf.sh|idio|shint|pyg', 'run conf again') }}

If you create a `dexy.conf` file, you should remove any lines you do not wish
to customize in case the dexy defaults change.

Filters
-------

Filters are what you apply to your documents to get dexy to run scripts or
syntax highlight source code.

You can print a list of all available dexy filters:

{{ codes('code/cli/filters.sh|idio|shint|pyg', 'filters') }}

You can get more information about individual filters:

{{ codes('code/cli/filters.sh|idio|shint|pyg', 'pyg filter') }}

Templates
---------

Templates are pre-baked dexy projects which you can use as a starting point for
your own projects, or to learn about how dexy works. To see a list of templates
available on your system:

{{ codes('code/cli/templates.sh|idio|shint|pyg', 'templates') }}

To use a template:

{{ codes('code/cli/templates.sh|idio|shint|pyg', 'gen') }}

The `gen` command creates the template files in the directory you specify:

{{ codes('code/cli/templates.sh|idio|shint|pyg', 'ls') }}

Grepping and Viewing
--------------------

Dexy has features to help you keep track of all the files and snippets you
generate, which you can include in your other documents.

After you have run dexy, you can use the `dexy grep` command to search for
document keys:

{{ codes('code/cli/grep.sh|idio|shint|pyg', 'grep') }}

If you want to include the pipe (|) character in your search, be sure to
enclose it in quotes or escape it so that your shell does not interpret it as a
pipe:

{{ codes('code/cli/grep.sh|idio|shint|pyg', 'grep with pipe') }}

The grep command can print out the names of sections in a document for you:

{{ codes('code/cli/grep.sh|idio|shint|pyg', 'grep with keys') }}

It can print out just the sections where the sections match an expression:

{{ codes('code/cli/grep.sh|idio|shint|pyg', 'grep with keyexpr') }}

It can print out the contents of a file:

{{ codes('code/cli/grep.sh|idio|shint|pyg', 'grep with contents') }}

The `dexy info` command prints out metadata:

{{ codes('code/cli/grep.sh|idio|shint|pyg', 'info') }}

The `cache_key` printed after each document key tells you where dexy is storing
the cache files and working files for generating that document. This
information can be helpful while troubleshooting.

{{ codes('code/cli/grep.sh|idio|shint|pyg', 'look in cache') }}

The `dexy viewer`_ plugin gives you a web interface for searching and browsing
generated snippets and files. After the plugin is installed, the `dexy viewer`
command will run the server.

.. _dexy viewer: https://github.com/ananelson/dexy-viewer

Reports
-------

The `reports` command prints a list of available reports:

{{ codes('code/cli/reports.sh|idio|shint|pyg', 'reports') }}

The reports enabled by default will always run after a successful dexy run
(some will also run even if an error occurs).

You can choose which reports dexy should run by setting the `--reports` command
line option (this is a good candidate to place in a `dexy.conf` file).

{{ codes('code/cli/reports.sh|idio|shint|pyg', 'custom reports') }}

Filter Commands (fcmds)
-----------------------

Filter commands are a way of allowing filters to create additional dexy
commands.

You can list all available filter commands:

{{ codes('code/cli/fcmds.sh|idio|shint|pyg', 'list fcmds') }}

Or the filter commands for a particular alias:

{{ codes('code/cli/fcmds.sh|idio|shint|pyg', 'fcmds for alias') }}

To get help on a fcmd do:

{{ codes('code/cli/fcmds.sh|idio|shint|pyg', 'help on fcmd') }}

To run the command do:

{{ codes('code/cli/fcmds.sh|idio|shint|pyg', 'run fcmd') }}

Cite
----

The `dexy cite` command prints out a bibtex citation (other formats available
on request) for citing dexy in academic works.

{{ codes('code/cli/cite.sh|idio|shint|pyg', 'cite') }}
