What's the best way to add dexy to an existing project?

Here's some recommendations.

docs directory
--------------

create a docs/ directory to hold documents you write using dexy

If you already have a docs/ directory, then it's possible that dexy can work with the files you have in there already. If you already have some static documentation, then maybe these documents can be just incorporated into your new documentation.


outputroot
----------

set the outputroot property to 'docs'

Setting the outputroot property to 'docs' means that the documents generated by sources in 'docs' will be at the top level of the resulting output



clashes with existing files
---------------------------

You may run into trouble when you start applying dexy filters to your existing project files.

Sometimes this is because your existing files have character encoding or other issues which are not supported by dexy.

At other times it's because you are using wildcards which are picking up files you didn't intend to process.

For example, if you have HTML pages which include template tags that look like
jinja tags, and you have something like ".html|jinja" in your dexy.yaml, then
you'll probably get jinja errors as dexy tries to process these files which
aren't meant for dexy. To fix problems like these, either restrict you wildcard
to "docs/\*.html" or use the `exclude` option to remove directories or file
name patterns which you don't want to match.


publishing to github pages
--------------------------

Here's a recipe for publishing your dexy-generated output to github pages.

Let's say we're working with a project in a directory ~/dev/example/.

Following `github's directions
<https://help.github.com/articles/creating-project-pages-manually>`__, check
out a copy of your repository in a directory parallel to your original working
directory of ~/dev/example/, say ~/dev/example-output/ or
~/dev/example-ghpages/

::
    
    git clone https://github.com/user/example.git example-output


